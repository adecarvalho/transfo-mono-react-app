{"ast":null,"code":"import _objectSpread from \"/Users/adc/work_react/transfo-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { SET_MODELE_KAPP, SET_NEW_REGLAGE } from './types';\nvar initState = {\n  modeleKapp: {},\n  reglages: {\n    u1eff: 0,\n    module: 10,\n    phase: 0\n  },\n  mesures: {}\n};\n\nvar process = function process(kapp, reglage) {\n  if (kapp && reglage) {\n    var u1 = Number(reglage.u1eff);\n    console.log('u1= ' + u1);\n    var module = Number(reglage.module);\n    console.log('module ' + module);\n    var phase = Number(reglage.phase * Math.PI / 180);\n    console.log('phase ' + phase);\n    var m = Number(kapp.rapport_m);\n    var rp = Number(kapp.resistance_rp);\n    var lp = Number(kapp.inducatnce_lp);\n    var rs = Number(kapp.resistance_rs);\n    var xs = Number(kapp.reactance_xs);\n    var reel = rs + module * Math.cos(phase);\n    var img = xs + module * Math.sin(phase);\n    var div = Math.sqrt(reel * reel + img * img);\n    var i2 = m * u1 / div;\n    var u2 = module * i2;\n    var p2 = u2 * i2 * Math.cos(phase);\n    var pertes = rs * i2 * i2 + u1 * u1 / rp;\n    var p1 = p2 + pertes;\n    var rendement = 100 * p2 / p1 || 0;\n    var q2 = u2 * i2 * Math.sin(phase);\n    var q1 = q2 + u1 * u1 / (314 * lp) + xs * i2 * i2;\n    var s1 = Math.sqrt(p1 * p1 + q1 * q1);\n    var i1 = s1 / u1 || 0;\n    console.log('I1eff= ' + i1);\n  }\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    //\n    case SET_MODELE_KAPP:\n      {\n        //process(action.payload, state.reglages)\n        var kapp = {};\n        return _objectSpread({}, state, {\n          modeleKapp: _objectSpread({}, action.payload)\n        });\n      }\n    //\n\n    case SET_NEW_REGLAGE:\n      {\n        //process(state.modeleKapp, action.payload)\n        //\n        return _objectSpread({}, state, {\n          reglages: _objectSpread({}, action.payload)\n        });\n      }\n    //\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/adc/work_react/transfo-react-app/src/store/rootReducer.js"],"names":["SET_MODELE_KAPP","SET_NEW_REGLAGE","initState","modeleKapp","reglages","u1eff","module","phase","mesures","process","kapp","reglage","u1","Number","console","log","Math","PI","m","rapport_m","rp","resistance_rp","lp","inducatnce_lp","rs","resistance_rs","xs","reactance_xs","reel","cos","img","sin","div","sqrt","i2","u2","p2","pertes","p1","rendement","q2","q1","s1","i1","rootReducer","state","action","type","payload"],"mappings":"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","sourcesContent":["import { SET_MODELE_KAPP, SET_NEW_REGLAGE } from './types'\n\nconst initState = {\n\tmodeleKapp: {},\n\treglages: { u1eff: 0, module: 10, phase: 0 },\n\tmesures: {}\n}\n\nconst process = (kapp, reglage) => {\n\tif (kapp && reglage) {\n\t\tconst u1 = Number(reglage.u1eff)\n\t\tconsole.log('u1= ' + u1)\n\n\t\tconst module = Number(reglage.module)\n\t\tconsole.log('module ' + module)\n\n\t\tconst phase = Number((reglage.phase * Math.PI) / 180)\n\t\tconsole.log('phase ' + phase)\n\n\t\tconst m = Number(kapp.rapport_m)\n\t\tconst rp = Number(kapp.resistance_rp)\n\t\tconst lp = Number(kapp.inducatnce_lp)\n\t\tconst rs = Number(kapp.resistance_rs)\n\t\tconst xs = Number(kapp.reactance_xs)\n\n\t\tconst reel = rs + module * Math.cos(phase)\n\t\tconst img = xs + module * Math.sin(phase)\n\t\tconst div = Math.sqrt(reel * reel + img * img)\n\n\t\tconst i2 = (m * u1) / div\n\t\tconst u2 = module * i2\n\t\tconst p2 = u2 * i2 * Math.cos(phase)\n\n\t\tconst pertes = rs * i2 * i2 + (u1 * u1) / rp\n\t\tconst p1 = p2 + pertes\n\n\t\tconst rendement = (100 * p2) / p1 || 0\n\n\t\tconst q2 = u2 * i2 * Math.sin(phase)\n\t\tconst q1 = q2 + (u1 * u1) / (314 * lp) + xs * i2 * i2\n\t\tconst s1 = Math.sqrt(p1 * p1 + q1 * q1)\n\t\tconst i1 = s1 / u1 || 0\n\n\t\tconsole.log('I1eff= ' + i1)\n\t}\n}\n\nconst rootReducer = (state = initState, action) => {\n\tswitch (action.type) {\n\t\t//\n\t\tcase SET_MODELE_KAPP: {\n\t\t\t//process(action.payload, state.reglages)\n\t\t\tconst kapp = {}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmodeleKapp: { ...action.payload }\n\t\t\t}\n\t\t}\n\t\t//\n\t\tcase SET_NEW_REGLAGE: {\n\t\t\t//process(state.modeleKapp, action.payload)\n\t\t\t//\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\treglages: { ...action.payload }\n\t\t\t}\n\t\t}\n\t\t//\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}