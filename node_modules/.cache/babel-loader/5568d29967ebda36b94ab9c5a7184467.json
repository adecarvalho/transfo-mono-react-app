{"ast":null,"code":"import _objectSpread from \"/Users/adc/work_react/transfo-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { SET_MODELE_KAPP, SET_NEW_REGLAGE } from './types';\nvar initState = {\n  modeleKapp: {\n    rapport_m: '1',\n    resistance_rp: '900',\n    inductance_lp: '1',\n    resistance_rs: '0.5',\n    reactance_xs: '0.5'\n  },\n  reglages: {\n    u1eff: '0',\n    module: '10',\n    phase: '0'\n  },\n  mesures: {\n    i1eff: '0',\n    i2eff: '0',\n    u2eff: '0',\n    p2: '0',\n    p1: '0',\n    rendement: '0'\n  }\n};\n\nvar process = function process(kapp, reglage) {\n  if (kapp && reglage) {\n    var res = {};\n    var u1 = Number(reglage.u1eff);\n    var module = Number(reglage.module);\n    var phase = Number(reglage.phase * Math.PI / 180);\n    var m = Number(kapp.rapport_m);\n    var rp = Number(kapp.resistance_rp);\n    var lp = Number(kapp.inductance_lp);\n    var rs = Number(kapp.resistance_rs);\n    var xs = Number(kapp.reactance_xs);\n    var reel = rs + module * Math.cos(phase);\n    var img = xs + module * Math.sin(phase);\n    var div = Math.sqrt(reel * reel + img * img);\n    var i2 = m * u1 / div || 0;\n    var u2 = module * i2 || 0;\n    var p2 = u2 * i2 * Math.cos(phase) || 0;\n    var pertes = rs * i2 * i2 + u1 * u1 / rp || 0;\n    var p1 = p2 + pertes || 0;\n    var rendement = 100 * p2 / p1 || 0;\n    var q2 = u2 * i2 * Math.sin(phase);\n    var q1 = q2 + u1 * u1 / (314 * lp) + xs * i2 * i2;\n    var s1 = Math.sqrt(p1 * p1 + q1 * q1);\n    var i1 = s1 / u1 || 0; //\n\n    res.i1eff = i1.toFixed(2);\n    res.i2eff = i2.toFixed(2);\n    res.u2eff = u2.toFixed(0);\n    res.p1 = p1.toFixed(0);\n    res.p2 = p2.toFixed(0);\n    res.rendement = rendement.toFixed(0);\n    return res; //console.log(res)\n  }\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    //\n    case SET_MODELE_KAPP:\n      {\n        var res = process(action.payload, state.reglages);\n        return _objectSpread({}, state, {\n          modeleKapp: _objectSpread({}, action.payload),\n          mesures: _objectSpread({}, res)\n        });\n      }\n    //\n\n    case SET_NEW_REGLAGE:\n      {\n        var _res = process(state.modeleKapp, action.payload); //\n\n\n        return _objectSpread({}, state, {\n          reglages: _objectSpread({}, action.payload),\n          mesures: _objectSpread({}, _res)\n        });\n      }\n    //\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/adc/work_react/transfo-react-app/src/store/rootReducer.js"],"names":["SET_MODELE_KAPP","SET_NEW_REGLAGE","initState","modeleKapp","rapport_m","resistance_rp","inductance_lp","resistance_rs","reactance_xs","reglages","u1eff","module","phase","mesures","i1eff","i2eff","u2eff","p2","p1","rendement","process","kapp","reglage","res","u1","Number","Math","PI","m","rp","lp","rs","xs","reel","cos","img","sin","div","sqrt","i2","u2","pertes","q2","q1","s1","i1","toFixed","rootReducer","state","action","type","payload"],"mappings":"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","sourcesContent":["import { SET_MODELE_KAPP, SET_NEW_REGLAGE } from './types'\n\nconst initState = {\n\tmodeleKapp: {\n\t\trapport_m: '1',\n\t\tresistance_rp: '900',\n\t\tinductance_lp: '1',\n\t\tresistance_rs: '0.5',\n\t\treactance_xs: '0.5'\n\t},\n\treglages: { u1eff: '0', module: '10', phase: '0' },\n\tmesures: {\n\t\ti1eff: '0',\n\t\ti2eff: '0',\n\t\tu2eff: '0',\n\t\tp2: '0',\n\t\tp1: '0',\n\t\trendement: '0'\n\t}\n}\n\nconst process = (kapp, reglage) => {\n\tif (kapp && reglage) {\n\t\tconst res = {}\n\n\t\tconst u1 = Number(reglage.u1eff)\n\t\tconst module = Number(reglage.module)\n\t\tconst phase = Number((reglage.phase * Math.PI) / 180)\n\n\t\tconst m = Number(kapp.rapport_m)\n\t\tconst rp = Number(kapp.resistance_rp)\n\t\tconst lp = Number(kapp.inductance_lp)\n\t\tconst rs = Number(kapp.resistance_rs)\n\t\tconst xs = Number(kapp.reactance_xs)\n\n\t\tconst reel = rs + module * Math.cos(phase)\n\t\tconst img = xs + module * Math.sin(phase)\n\t\tconst div = Math.sqrt(reel * reel + img * img)\n\n\t\tconst i2 = (m * u1) / div || 0\n\t\tconst u2 = module * i2 || 0\n\t\tconst p2 = u2 * i2 * Math.cos(phase) || 0\n\n\t\tconst pertes = rs * i2 * i2 + (u1 * u1) / rp || 0\n\t\tconst p1 = p2 + pertes || 0\n\n\t\tconst rendement = (100 * p2) / p1 || 0\n\n\t\tconst q2 = u2 * i2 * Math.sin(phase)\n\t\tconst q1 = q2 + (u1 * u1) / (314 * lp) + xs * i2 * i2\n\t\tconst s1 = Math.sqrt(p1 * p1 + q1 * q1)\n\t\tconst i1 = s1 / u1 || 0\n\n\t\t//\n\t\tres.i1eff = i1.toFixed(2)\n\t\tres.i2eff = i2.toFixed(2)\n\t\tres.u2eff = u2.toFixed(0)\n\t\tres.p1 = p1.toFixed(0)\n\t\tres.p2 = p2.toFixed(0)\n\t\tres.rendement = rendement.toFixed(0)\n\n\t\treturn res\n\t\t//console.log(res)\n\t}\n}\n\nconst rootReducer = (state = initState, action) => {\n\tswitch (action.type) {\n\t\t//\n\t\tcase SET_MODELE_KAPP: {\n\t\t\tconst res = process(action.payload, state.reglages)\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmodeleKapp: { ...action.payload },\n\t\t\t\tmesures: { ...res }\n\t\t\t}\n\t\t}\n\t\t//\n\t\tcase SET_NEW_REGLAGE: {\n\t\t\tconst res = process(state.modeleKapp, action.payload)\n\t\t\t//\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\treglages: { ...action.payload },\n\t\t\t\tmesures: { ...res }\n\t\t\t}\n\t\t}\n\t\t//\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport default rootReducer\n"]},"metadata":{},"sourceType":"module"}